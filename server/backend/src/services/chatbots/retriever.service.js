const EntityRecognizer = require('../regconizers/entity.regconizer');
const IntentRecognizer = require('../regconizers/intent.regconizer');
const RetrieverQueryBuilder = require('../builders/retrieverquery.builder');
const LLMService = require('./llm.service');
const { scoreContextRelevance } = require('../../helpers/improvements/context.scoring');
const { buildPromptWithContext } = require('../../helpers/improvements/prompt.builder');

class RetrieverService {
    /**
     * T·ªïng pipeline t·ª´ c√¢u h·ªèi ‚Üí context data
     */
    async retrieveContext(question) {
        // Step 1: Recognize entity
        const entities = await EntityRecognizer.recognizeEntities(question);

        // Step 2: Recognize intent
        const { intents, fields } = await IntentRecognizer.recognizeIntent(question);

        // Step 3: Retrieve nodes (ch∆∞a clean l·∫Øm v√¨ c√≤n nhi·ªÅu th√¥ng tin kh√¥ng li√™n quan)
        const contextNodes = await RetrieverQueryBuilder.retrieve(entities, fields);

        return {
            question,
            intents,
            fields,
            contextNodes
        };
    }

    /**
     * Nh·∫≠n c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª± nhi√™n t·ª´ Gemini d·ª±a v√†o context.
     * @param {string} question
     * @returns {string} answer
     */
    async chatWithBot(question) {
        console.time("‚è±Ô∏è Total chatWithBot");

        console.time("üß† Intent recognition");
        const { intents } = await IntentRecognizer.recognizeIntent(question);
        console.timeEnd("üß† Intent recognition");

        if (intents.length === 1 && intents[0] === 'general_info') {
            const prompt = `
                B·∫°n l√† m·ªôt chatbot tuy·ªÉn sinh c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc T√¥n ƒê·ª©c Th·∫Øng (TDTU).
                
                Ng∆∞·ªùi d√πng v·ª´a ch√†o h·ªèi ho·∫∑c tr√≤ chuy·ªán x√£ giao.
                H√£y tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn, vui v·∫ª.
                Kh√¥ng c·∫ßn ƒë∆∞a th√™m th√¥ng tin h·ªçc t·∫≠p n·∫øu kh√¥ng ƒë∆∞·ª£c h·ªèi.
                
                C√¢u h·ªèi:
                ${question}
                
                Tr·∫£ l·ªùi:
            `;
            console.time("‚úçÔ∏è Gemini generate answer (general_info)");
            const answer = await LLMService.generateAnswer(prompt);
            console.timeEnd("‚úçÔ∏è Gemini generate answer (general_info)");

            console.timeEnd("‚è±Ô∏è Total chatWithBot");
            return { prompt, answer };
        }

        console.time("üì¶ Retrieve context");
        const rawContext = await this.retrieveContext(question);
        const contextNodes = await scoreContextRelevance(question, rawContext.contextNodes);
        console.timeEnd("üì¶ Retrieve context");

        if (!contextNodes.length) {
            const fallbackPrompt = `
                B·∫°n l√† chatbot tuy·ªÉn sinh. Hi·ªán kh√¥ng c√≥ th√¥ng tin t·ª´ h·ªá th·ªëng.
                C√¢u h·ªèi: ${question}
                H√£y tr·∫£ l·ªùi kh√©o l√©o v√† gi·ªØ th√°i ƒë·ªô th√¢n thi·ªán.`;
            console.time("‚úçÔ∏è Gemini generate answer (fallback)");
            const answer = await LLMService.generateAnswer(fallbackPrompt);
            console.timeEnd("‚úçÔ∏è Gemini generate answer (fallback)");
    
            console.timeEnd("‚è±Ô∏è Total chatWithBot");
            return { prompt: fallbackPrompt, answer };
        }

        const prompt = buildPromptWithContext(question, contextNodes);
        console.time("‚úçÔ∏è Gemini generate answer (with context)");
        const answer = await LLMService.generateAnswer(prompt);
        console.timeEnd("‚úçÔ∏è Gemini generate answer (with context)");

        console.timeEnd("‚è±Ô∏è Total chatWithBot");

        return { prompt, answer, contextNodes };
    }
}

module.exports = new RetrieverService();
